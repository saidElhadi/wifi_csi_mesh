#include <stdio.h>
#include <string.h>
#include "nvs_flash.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "esp_netif.h"
#include "esp_now.h"

#define BROADCAST_INTERVAL (1000) // Send data every 10 ms

static const uint8_t channel = 1;

// Node 0's MAC address
static const uint8_t node_0_mac[] = {0x1a, 0x00, 0x00, 0x00, 0x00, 0x00};

// Replace with broadcast MAC addresses of listening nodes (1, 2, 3)
static const uint8_t broadcast_mac_addresses[][6] = {
    {0x1a, 0x00, 0x00, 0x00, 0x00, 0x01}, 
    {0x1a, 0x00, 0x00, 0x00, 0x00, 0x02}, 
    {0x1a, 0x00, 0x00, 0x00, 0x00, 0x03}  
};

static uint8_t broadcast_data = 0; // Data to broadcast

static const char *TAG = "node_0";

static void wifi_init(void) {
    ESP_ERROR_CHECK(esp_netif_init());
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));
    ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_RAM));
    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
    ESP_ERROR_CHECK(esp_wifi_start());
    ESP_ERROR_CHECK(esp_wifi_set_channel(channel, WIFI_SECOND_CHAN_NONE));
}

static void espnow_init() {
    ESP_ERROR_CHECK(esp_now_init());
    ESP_ERROR_CHECK(esp_now_set_pmk((uint8_t *)"pmk1234567890123"));

    esp_now_peer_info_t peer;
    memset(&peer, 0, sizeof(peer));
    for (int i = 0; i < sizeof(broadcast_mac_addresses) / 6; ++i) {
        memcpy(peer.peer_addr, broadcast_mac_addresses[i], 6);
        peer.channel = channel;
        peer.ifidx = WIFI_IF_STA;
        peer.encrypt = false;
        esp_err_t add_peer_status = esp_now_add_peer(&peer);
        if (add_peer_status != ESP_OK) {
            ESP_LOGE(TAG, "Failed to add peer: %s", esp_err_to_name(add_peer_status));
        }
    }
}

void format_mac_address(const uint8_t *mac_addr, char *buf) {
    sprintf(buf, "%02x:%02x:%02x:%02x:%02x:%02x", 
            mac_addr[0], mac_addr[1], mac_addr[2],
            mac_addr[3], mac_addr[4], mac_addr[5]);
}

void app_main() {
    // Initialize NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    wifi_init();

    // Set the MAC address for Node 0
    ESP_ERROR_CHECK(esp_wifi_set_mac(WIFI_IF_STA, node_0_mac)); 

    espnow_init();

    // Format Node 0's MAC address 
    char node_0_mac_str[18];
    format_mac_address(node_0_mac, node_0_mac_str);

    ESP_LOGI(TAG, "Node 0 started with MAC: %s", node_0_mac_str);

    while (true) {
        for (int i = 0; i < sizeof(broadcast_mac_addresses) / 6; ++i) {
            esp_err_t result = esp_now_send(broadcast_mac_addresses[i], 
                                            &broadcast_data, sizeof(broadcast_data));

            // Format the destination MAC address
            char dest_mac_str[18];
            format_mac_address(broadcast_mac_addresses[i], dest_mac_str);

            if (result == ESP_OK) {
                ESP_LOGI(TAG, "Sent data to %s: %d", dest_mac_str, broadcast_data);
            } else {
                ESP_LOGE(TAG, "Error sending data to %s: %s", 
                         dest_mac_str, esp_err_to_name(result));
                // Implement retry mechanism
                vTaskDelay(pdMS_TO_TICKS(10)); // Small delay before retrying
                result = esp_now_send(broadcast_mac_addresses[i], 
                                      &broadcast_data, sizeof(broadcast_data));
                if (result == ESP_OK) {
                    ESP_LOGI(TAG, "Retry successful for %s: %d", dest_mac_str, broadcast_data);
                } else {
                    ESP_LOGE(TAG, "Retry failed for %s: %s", 
                             dest_mac_str, esp_err_to_name(result));
                }
            }
        }

        broadcast_data++;
        vTaskDelay(pdMS_TO_TICKS(BROADCAST_INTERVAL / 1000)); 
    }
}
